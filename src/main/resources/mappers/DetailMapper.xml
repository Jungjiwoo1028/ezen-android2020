<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="DetailMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="MemberMap"
		type="study.team.abuhae.model.Member">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="memberno" column="memberno" />
		<result property="type" column="type" />
		<result property="id" column="id" />
		<result property="password" column="password" />
		<result property="name" column="name" />
		<result property="email" column="email" />
		<result property="phone" column="phone" />
		<result property="birthdate" column="birthdate" />
		<result property="job_opening" column="job_opening" />
		<result property="gender" column="gender" />
	</resultMap>

	<resultMap id="MomMap"
		type="study.team.abuhae.model.Mom_info">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="momno" column="momno" />
		<result property="want_act" column="want_act" />
		<result property="want_age" column="want_age" />
		<result property="kids_num" column="kids_num" />
		<result property="kids_age" column="kids_age" />
		<result property="payment" column="payment" />
		<result property="si" column="si" />
		<result property="gu" column="gu" />
		<result property="dong" column="dong" />
		<result property="schedule" column="schedule" />
		<result property="schedule_ok" column="schedule_ok" />
		<result property="sitter_gender" column="sitter_gender" />
		<result property="interview_type" column="interview_type" />
		<result property="care_type" column="care_type" />
		<result property="openingdate" column="openingdate" />
		<result property="memberno" column="memberno" />
	</resultMap>

	<resultMap id="SitterMap"
		type="study.team.abuhae.model.Sitter_info">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="sitterno" column="sitterno" />
		<result property="sitter_type" column="sitter_type" />
		<result property="want_act" column="want_act" />
		<result property="want_age" column="want_age" />
		<result property="payment" column="payment" />
		<result property="si" column="si" />
		<result property="gu" column="gu" />
		<result property="dong" column="dong" />
		<result property="schedule" column="schedule" />
		<result property="schedule_set" column="schedule_set" />
		<result property="introduce" column="introduce" />
		<result property="cctv" column="cctv" />
		<result property="openingdate" column="openingdate" />
		<result property="openingdate_test" column="openingdate_test" />
		<result property="memberno" column="memberno" />
		<result property="rev_rate" column="rev_rate" />
		<result property="rev_count" column="rev_count" />
		<result property="profile_img_file" column="profile_img_count" />
		<result property="expe_contents" column="expe_contents" />
		<result property="expe_start_date" column="expe_start_date" />
		<result property="expe_end_date" column="expe_end_date" />
		<result property="heartno" column="heartno" />
		<result property="who" column="who" />
		<result property="applydate" column="applydate" />
		<result property="accept" column="accept" />
		<result property="resino" column="resino" />
		<result property="cntno" column="cntno" />
	</resultMap>
	
	<resultMap type="study.team.abuhae.model.Sitter_experience" id="ExperienceMap">
		<result property="experno" column="experno"/>	
		<result property="expe_contents" column="expe_contents"/>	
		<result property="expe_start_date" column="expe_start_date"/>	
		<result property="expe_end_date" column="expe_end_date"/>	
		<result property="sitterno" column="sitterno"/>			
	</resultMap>
	
	<resultMap type="study.team.abuhae.model.Report" id="ReportMap">
		<result property="reportno" column="reportno"/>	
		<result property="who" column="who"/>	
		<result property="type" column="type"/>	
		<result property="contents" column="contents"/>	
		<result property="momno" column="momno"/>	
		<result property="sitterno" column="sitterno"/>				
	</resultMap>
	
	<!-- 시터 상세페이지 -->
	<select id="selectItem" parameterType="study.team.abuhae.model.Sitter_info"
		resultMap="SitterMap">
		SELECT s.memberno, type, CONCAT(LEFT(name,1), 'O', RIGHT(name,1)) AS
		name, email, phone, FLOOR(
		(CAST(REPLACE(current_date,'-','') AS
		unsigned) -
		CAST(REPLACE(birthdate,'-','') as unsigned)) / 10000 ) + 2
		AS birthdate,
		job_opening, s.sitterno, sitter_type, want_act, want_age, gender, introduce,
		si, gu, dong, openingdate,
		payment, payment_ok, cctv, answer, CASE
	<![CDATA[WHEN TIMESTAMPDIFF(minute, openingdate, now()) <= 0 THEN '방금 전'
	WHEN TIMESTAMPDIFF(minute, openingdate, now()) < 60 THEN
	CONCAT(TIMESTAMPDIFF(minute, openingdate, now()), '분 전')
	WHEN TIMESTAMPDIFF(hour, openingdate, now()) < 24 THEN
	CONCAT(TIMESTAMPDIFF(hour, openingdate, now()), '시간 전')
	WHEN TIMESTAMPDIFF(day, openingdate, now()) < 30 THEN]]>
		CONCAT(TIMESTAMPDIFF(day, openingdate, now()), '일 전')
		ELSE
		CONCAT(TIMESTAMPDIFF(month, openingdate, now()), '달 전')
		END AS
<<<<<<< Updated upstream
		openingdate_test, (SELECT COUNT(revno) FROM review r WHERE s.sitterno=r.sitterno AND who='M') AS rev_count,
		(SELECT COUNT(heartno) FROM heart h WHERE s.sitterno=h.sitterno AND who='M') AS heartno,
		(SELECT expe_contents FROM sitter_experience e WHERE e.sitterno=s.sitterno) AS expe_contents,
		(SELECT expe_start_date FROM sitter_experience e WHERE e.sitterno=s.sitterno) AS expe_start_date,
		(SELECT expe_end_date FROM sitter_experience e WHERE e.sitterno=s.sitterno) AS expe_end_date,
		(SELECT COUNT(cntno) FROM connect c WHERE c.sitterno=s.sitterno AND accept='Y') AS cntno,
		(SELECT rev_rate FROM review r WHERE s.sitterno=r.sitterno AND who='M') AS rev_rate
		FROM sitter_info s
		INNER JOIN member m ON s.memberno=m.memberno
		<where>
			s.sitterno=#{sitterno}
		</where>
=======
		openingdate
			FROM sitter_info s 
			INNER JOIN review r ON r.sitterno=s.sitterno
			INNER JOIN member m ON m.memberno=s.memberno
			INNER JOIN sitter_experience e ON e.sitterno=s.sitterno
			INNER JOIN resi_cert c ON c.sitterno=s.sitterno
			INNER JOIN heart h ON h.sitterno=s.sitterno
			INNER JOIN connect n ON n.sitterno=s.sitterno
			WHERE sitterno=#{sitterno}
>>>>>>> Stashed changes
	</select>
	
	<select id="selectReportItem" parameterType="study.team.abuhae.model.Sitter_info"
		resultMap="SitterMap">
		SELECT
   		SUBSTRING_INDEX (SUBSTRING_INDEX(sitter_info.want_age,',',numbers.n),',',-1) want_age
		FROM 
	   (select  1 n union  all  select 2  
	    union  all  select  3  union  all select 4 
	    union  all  select  5  union  all  select  6
	    union  all  select  7  union  all  select  8 
	    union  all  select  9 union  all  select  10) numbers INNER  JOIN sitter_info
	    on CHAR_LENGTH (sitter_info.want_age) 
	      - CHAR_LENGTH ( REPLACE ( sitter_info.want_age , ',' , '' ))>= numbers . n-1)
	</select>
	
	<update id="update" parameterType="study.team.abuhae.model.Sitter_info">
		UPDATE sitter_info SET test = test+1 WHERE sitterno=#{sitterno}
	</update>
	
</mapper>